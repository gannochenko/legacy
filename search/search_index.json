{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prussia Scans Project list Note: prussiascans is a work-in-progress title. This title will most likely be changed after going public. Project Public URL Description prussiascan The front-end for the prussiascans project. prussiascan.api The data API endpoint prussiascan.auth The authentication microservice prussiascan.aux.api The microservise with auxiliary functions. ren39 https://ren39.ru The Ren39 project source code. Local launch Clone the repo, cd to the folder. Run make install to install all local dependencies for every application. Localstack profile mkdir ~/.aws printf \"[legacy]\\naws_access_key_id=doesnt-matter\\naws_secret_access_key=doesnt-matter\\nregion=eu-central-1\\n\" >> ~/.aws/credentials Env file Copy the env file template: cp ./.env.example ./.env.local Fill up the secret variables Running all services Run make run_infra to launch local infrastructure. Wait until the infrastructure is ready. If not done before, in another terminal run make create_resources to create the resources in the Localstack. If not done before, run make seed_database to fill the database with some data. In another terminal run: make run app=prussiascan.api to launch the API microservice. In another terminal run: make run app=prussiascan.auth to launch the Auth microservice. Wait for prussiascan.api to finish booting and then in another terminal run make run app=prussiascan to launch the front-end application. Seeding data Obtain the following folders, since they are not included due to massive weight: .mongo , apps/prussiascan.api/upload Go to the prussiascan.api folder: cd apps/prussiascan.api . Run the seeding script: make mongo2dynamo . Inviting a user Import the Postman collection from the postman.json file in order to be able to call the endpoints from there. Call legacy/auth/invite , providing an email and roles in the body. The person will receive an email with the link, containing a token. For example: http://localhost:8000/join?token=TOKEN&email=email-dfguvdfajvysadfs%40gmail.com Navigating to that link should automatically authenticate the user. CI/CD Before running CI/CD make sure that infrastructure was pre-created. Secrets So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION SENDIN_BLUE_API_KEY JWT_SECRET CONTRIBUTOR_API_KEY CICD_API_KEY ADMIN_API_KEY The other env vars come from the infrastructure. SendinBlue is used to send email. Either reuse your previous API key , or create a new one .","title":"Prussia Scans"},{"location":"#prussia-scans","text":"","title":"Prussia Scans"},{"location":"#project-list","text":"Note: prussiascans is a work-in-progress title. This title will most likely be changed after going public. Project Public URL Description prussiascan The front-end for the prussiascans project. prussiascan.api The data API endpoint prussiascan.auth The authentication microservice prussiascan.aux.api The microservise with auxiliary functions. ren39 https://ren39.ru The Ren39 project source code.","title":"Project list"},{"location":"#local-launch","text":"Clone the repo, cd to the folder. Run make install to install all local dependencies for every application.","title":"Local launch"},{"location":"#localstack-profile","text":"mkdir ~/.aws printf \"[legacy]\\naws_access_key_id=doesnt-matter\\naws_secret_access_key=doesnt-matter\\nregion=eu-central-1\\n\" >> ~/.aws/credentials","title":"Localstack profile"},{"location":"#env-file","text":"Copy the env file template: cp ./.env.example ./.env.local Fill up the secret variables","title":"Env file"},{"location":"#running-all-services","text":"Run make run_infra to launch local infrastructure. Wait until the infrastructure is ready. If not done before, in another terminal run make create_resources to create the resources in the Localstack. If not done before, run make seed_database to fill the database with some data. In another terminal run: make run app=prussiascan.api to launch the API microservice. In another terminal run: make run app=prussiascan.auth to launch the Auth microservice. Wait for prussiascan.api to finish booting and then in another terminal run make run app=prussiascan to launch the front-end application.","title":"Running all services"},{"location":"#seeding-data","text":"Obtain the following folders, since they are not included due to massive weight: .mongo , apps/prussiascan.api/upload Go to the prussiascan.api folder: cd apps/prussiascan.api . Run the seeding script: make mongo2dynamo .","title":"Seeding data"},{"location":"#inviting-a-user","text":"Import the Postman collection from the postman.json file in order to be able to call the endpoints from there. Call legacy/auth/invite , providing an email and roles in the body. The person will receive an email with the link, containing a token. For example: http://localhost:8000/join?token=TOKEN&email=email-dfguvdfajvysadfs%40gmail.com Navigating to that link should automatically authenticate the user.","title":"Inviting a user"},{"location":"#cicd","text":"Before running CI/CD make sure that infrastructure was pre-created.","title":"CI/CD"},{"location":"#secrets","text":"So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION SENDIN_BLUE_API_KEY JWT_SECRET CONTRIBUTOR_API_KEY CICD_API_KEY ADMIN_API_KEY The other env vars come from the infrastructure. SendinBlue is used to send email. Either reuse your previous API key , or create a new one .","title":"Secrets"},{"location":"002_troubleshooting/","text":"Troubleshooting Q: I have troubles launching localstack A: Run make remove_resources and try restarting. Note, that all your local data will be lost.","title":"Troubleshooting"},{"location":"002_troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"002_troubleshooting/#q-i-have-troubles-launching-localstack","text":"A: Run make remove_resources and try restarting. Note, that all your local data will be lost.","title":"Q: I have troubles launching localstack"},{"location":"003_deployment/","text":"Deployment To deploy, just create a PR from dev branch to master , and merge it. The infrastructure lives in the other repository .","title":"Deployment"},{"location":"003_deployment/#deployment","text":"To deploy, just create a PR from dev branch to master , and merge it. The infrastructure lives in the other repository .","title":"Deployment"},{"location":"004_contacts/","text":"Contacts Sergei Gannochenko - Linkedin","title":"Contacts"},{"location":"004_contacts/#contacts","text":"Sergei Gannochenko - Linkedin","title":"Contacts"},{"location":"applications/000_api/","text":"API application The microservice contains the following serverless functions: runAPI - provides API for data sourcing, mostly called during the build time of the front-end. sendMessage - allows sending a message via the contact form. SendinBlue SendinBlue is used to send email. Either reuse your previous API key , or create a new one . CI/CD Before running CI/CD make sure that the lambda functions mentioned above exists. There is an infrastructure repository containing terraform files that, being applied, create all the resources. Secrets So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION SENDIN_BLUE_API_KEY The other env vars come from the infrastructure.","title":"API application"},{"location":"applications/000_api/#api-application","text":"The microservice contains the following serverless functions: runAPI - provides API for data sourcing, mostly called during the build time of the front-end. sendMessage - allows sending a message via the contact form.","title":"API application"},{"location":"applications/000_api/#sendinblue","text":"SendinBlue is used to send email. Either reuse your previous API key , or create a new one .","title":"SendinBlue"},{"location":"applications/000_api/#cicd","text":"Before running CI/CD make sure that the lambda functions mentioned above exists. There is an infrastructure repository containing terraform files that, being applied, create all the resources.","title":"CI/CD"},{"location":"applications/000_api/#secrets","text":"So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION SENDIN_BLUE_API_KEY The other env vars come from the infrastructure.","title":"Secrets"},{"location":"applications/001_auth/","text":"Auth application The microservice contains the following serverless functions: getUser - function returns a user structure by a token provided. This function is not exposed via the Gateway API. runAPI - function provides access to the user API: invite, signup, etc. CI/CD Before running CI/CD make sure that the lambda functions mentioned above exists. There is an infrastructure repository containing terraform files that, being applied, create all the resources. Secrets So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The other env vars come from the infrastructure.","title":"Auth application"},{"location":"applications/001_auth/#auth-application","text":"The microservice contains the following serverless functions: getUser - function returns a user structure by a token provided. This function is not exposed via the Gateway API. runAPI - function provides access to the user API: invite, signup, etc.","title":"Auth application"},{"location":"applications/001_auth/#cicd","text":"Before running CI/CD make sure that the lambda functions mentioned above exists. There is an infrastructure repository containing terraform files that, being applied, create all the resources.","title":"CI/CD"},{"location":"applications/001_auth/#secrets","text":"So far we do not use any software like Vault for managing secrets. The following secrets should be obtained/generated and then added as environment variables on GitHub : AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION The other env vars come from the infrastructure.","title":"Secrets"},{"location":"applications/001_auxapi/","text":"Aux API application The microservice contains the following serverless functions: triggerDeployment - function is executed periodically and check for a flag in the database. If the flag is on , it triggers the front-end build at Vercel. This function is not exposed via the API Gateway.","title":"Aux API application"},{"location":"applications/001_auxapi/#aux-api-application","text":"The microservice contains the following serverless functions: triggerDeployment - function is executed periodically and check for a flag in the database. If the flag is on , it triggers the front-end build at Vercel. This function is not exposed via the API Gateway.","title":"Aux API application"}]}